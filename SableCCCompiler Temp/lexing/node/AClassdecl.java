/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import lexing.analysis.*;

@SuppressWarnings("nls")
public final class AClassdecl extends PClassdecl
{
    private PClassdeclspec _classdeclspec_;
    private PClassdecldeff _classdecldeff_;

    public AClassdecl()
    {
        // Constructor
    }

    public AClassdecl(
        @SuppressWarnings("hiding") PClassdeclspec _classdeclspec_,
        @SuppressWarnings("hiding") PClassdecldeff _classdecldeff_)
    {
        // Constructor
        setClassdeclspec(_classdeclspec_);

        setClassdecldeff(_classdecldeff_);

    }

    @Override
    public Object clone()
    {
        return new AClassdecl(
            cloneNode(this._classdeclspec_),
            cloneNode(this._classdecldeff_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassdecl(this);
    }

    public PClassdeclspec getClassdeclspec()
    {
        return this._classdeclspec_;
    }

    public void setClassdeclspec(PClassdeclspec node)
    {
        if(this._classdeclspec_ != null)
        {
            this._classdeclspec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classdeclspec_ = node;
    }

    public PClassdecldeff getClassdecldeff()
    {
        return this._classdecldeff_;
    }

    public void setClassdecldeff(PClassdecldeff node)
    {
        if(this._classdecldeff_ != null)
        {
            this._classdecldeff_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classdecldeff_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classdeclspec_)
            + toString(this._classdecldeff_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classdeclspec_ == child)
        {
            this._classdeclspec_ = null;
            return;
        }

        if(this._classdecldeff_ == child)
        {
            this._classdecldeff_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classdeclspec_ == oldChild)
        {
            setClassdeclspec((PClassdeclspec) newChild);
            return;
        }

        if(this._classdecldeff_ == oldChild)
        {
            setClassdecldeff((PClassdecldeff) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
