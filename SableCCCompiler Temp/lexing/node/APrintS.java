/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import lexing.analysis.*;

@SuppressWarnings("nls")
public final class APrintS extends PS
{
    private TPrintln _println_;
    private TLeftParen _leftParen_;
    private PL _l_;
    private TRightParen _rightParen_;

    public APrintS()
    {
        // Constructor
    }

    public APrintS(
        @SuppressWarnings("hiding") TPrintln _println_,
        @SuppressWarnings("hiding") TLeftParen _leftParen_,
        @SuppressWarnings("hiding") PL _l_,
        @SuppressWarnings("hiding") TRightParen _rightParen_)
    {
        // Constructor
        setPrintln(_println_);

        setLeftParen(_leftParen_);

        setL(_l_);

        setRightParen(_rightParen_);

    }

    @Override
    public Object clone()
    {
        return new APrintS(
            cloneNode(this._println_),
            cloneNode(this._leftParen_),
            cloneNode(this._l_),
            cloneNode(this._rightParen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrintS(this);
    }

    public TPrintln getPrintln()
    {
        return this._println_;
    }

    public void setPrintln(TPrintln node)
    {
        if(this._println_ != null)
        {
            this._println_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._println_ = node;
    }

    public TLeftParen getLeftParen()
    {
        return this._leftParen_;
    }

    public void setLeftParen(TLeftParen node)
    {
        if(this._leftParen_ != null)
        {
            this._leftParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParen_ = node;
    }

    public PL getL()
    {
        return this._l_;
    }

    public void setL(PL node)
    {
        if(this._l_ != null)
        {
            this._l_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l_ = node;
    }

    public TRightParen getRightParen()
    {
        return this._rightParen_;
    }

    public void setRightParen(TRightParen node)
    {
        if(this._rightParen_ != null)
        {
            this._rightParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._println_)
            + toString(this._leftParen_)
            + toString(this._l_)
            + toString(this._rightParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._println_ == child)
        {
            this._println_ = null;
            return;
        }

        if(this._leftParen_ == child)
        {
            this._leftParen_ = null;
            return;
        }

        if(this._l_ == child)
        {
            this._l_ = null;
            return;
        }

        if(this._rightParen_ == child)
        {
            this._rightParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._println_ == oldChild)
        {
            setPrintln((TPrintln) newChild);
            return;
        }

        if(this._leftParen_ == oldChild)
        {
            setLeftParen((TLeftParen) newChild);
            return;
        }

        if(this._l_ == oldChild)
        {
            setL((PL) newChild);
            return;
        }

        if(this._rightParen_ == oldChild)
        {
            setRightParen((TRightParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
