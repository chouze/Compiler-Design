/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import java.util.*;
import lexing.analysis.*;

@SuppressWarnings("nls")
public final class AFactorNotterminal extends PNotterminal
{
    private PFactor _factor_;
    private final LinkedList<PDotarray> _dotarray_ = new LinkedList<PDotarray>();

    public AFactorNotterminal()
    {
        // Constructor
    }

    public AFactorNotterminal(
        @SuppressWarnings("hiding") PFactor _factor_,
        @SuppressWarnings("hiding") List<PDotarray> _dotarray_)
    {
        // Constructor
        setFactor(_factor_);

        setDotarray(_dotarray_);

    }

    @Override
    public Object clone()
    {
        return new AFactorNotterminal(
            cloneNode(this._factor_),
            cloneList(this._dotarray_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFactorNotterminal(this);
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    public LinkedList<PDotarray> getDotarray()
    {
        return this._dotarray_;
    }

    public void setDotarray(List<PDotarray> list)
    {
        this._dotarray_.clear();
        this._dotarray_.addAll(list);
        for(PDotarray e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._factor_)
            + toString(this._dotarray_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        if(this._dotarray_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        for(ListIterator<PDotarray> i = this._dotarray_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDotarray) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
