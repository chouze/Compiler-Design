/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import lexing.analysis.*;

@SuppressWarnings("nls")
public final class ACaseCaselist extends PCaselist
{
    private TCase _case_;
    private PExp _exp_;
    private TColon _colon_;
    private PStatement _statement_;
    private PCaselist _caselist_;

    public ACaseCaselist()
    {
        // Constructor
    }

    public ACaseCaselist(
        @SuppressWarnings("hiding") TCase _case_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PStatement _statement_,
        @SuppressWarnings("hiding") PCaselist _caselist_)
    {
        // Constructor
        setCase(_case_);

        setExp(_exp_);

        setColon(_colon_);

        setStatement(_statement_);

        setCaselist(_caselist_);

    }

    @Override
    public Object clone()
    {
        return new ACaseCaselist(
            cloneNode(this._case_),
            cloneNode(this._exp_),
            cloneNode(this._colon_),
            cloneNode(this._statement_),
            cloneNode(this._caselist_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACaseCaselist(this);
    }

    public TCase getCase()
    {
        return this._case_;
    }

    public void setCase(TCase node)
    {
        if(this._case_ != null)
        {
            this._case_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._case_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    public PCaselist getCaselist()
    {
        return this._caselist_;
    }

    public void setCaselist(PCaselist node)
    {
        if(this._caselist_ != null)
        {
            this._caselist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caselist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._case_)
            + toString(this._exp_)
            + toString(this._colon_)
            + toString(this._statement_)
            + toString(this._caselist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._case_ == child)
        {
            this._case_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        if(this._caselist_ == child)
        {
            this._caselist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._case_ == oldChild)
        {
            setCase((TCase) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        if(this._caselist_ == oldChild)
        {
            setCaselist((PCaselist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
