/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import lexing.analysis.*;

@SuppressWarnings("nls")
public final class ANotterminalTerm extends PTerm
{
    private PNotterminal _notterminal_;
    private PTlist _tlist_;

    public ANotterminalTerm()
    {
        // Constructor
    }

    public ANotterminalTerm(
        @SuppressWarnings("hiding") PNotterminal _notterminal_,
        @SuppressWarnings("hiding") PTlist _tlist_)
    {
        // Constructor
        setNotterminal(_notterminal_);

        setTlist(_tlist_);

    }

    @Override
    public Object clone()
    {
        return new ANotterminalTerm(
            cloneNode(this._notterminal_),
            cloneNode(this._tlist_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotterminalTerm(this);
    }

    public PNotterminal getNotterminal()
    {
        return this._notterminal_;
    }

    public void setNotterminal(PNotterminal node)
    {
        if(this._notterminal_ != null)
        {
            this._notterminal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notterminal_ = node;
    }

    public PTlist getTlist()
    {
        return this._tlist_;
    }

    public void setTlist(PTlist node)
    {
        if(this._tlist_ != null)
        {
            this._tlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tlist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._notterminal_)
            + toString(this._tlist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._notterminal_ == child)
        {
            this._notterminal_ = null;
            return;
        }

        if(this._tlist_ == child)
        {
            this._tlist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._notterminal_ == oldChild)
        {
            setNotterminal((PNotterminal) newChild);
            return;
        }

        if(this._tlist_ == oldChild)
        {
            setTlist((PTlist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
