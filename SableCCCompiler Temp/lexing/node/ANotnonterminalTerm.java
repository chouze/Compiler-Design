/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import lexing.analysis.*;

@SuppressWarnings("nls")
public final class ANotNonterminalTerm extends PTerm
{
    private PNotNonterminal _notNonterminal_;
    private PTlist _tlist_;

    public ANotNonterminalTerm()
    {
        // Constructor
    }

    public ANotNonterminalTerm(
        @SuppressWarnings("hiding") PNotNonterminal _notNonterminal_,
        @SuppressWarnings("hiding") PTlist _tlist_)
    {
        // Constructor
        setNotNonterminal(_notNonterminal_);

        setTlist(_tlist_);

    }

    @Override
    public Object clone()
    {
        return new ANotNonterminalTerm(
            cloneNode(this._notNonterminal_),
            cloneNode(this._tlist_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotNonterminalTerm(this);
    }

    public PNotNonterminal getNotNonterminal()
    {
        return this._notNonterminal_;
    }

    public void setNotNonterminal(PNotNonterminal node)
    {
        if(this._notNonterminal_ != null)
        {
            this._notNonterminal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notNonterminal_ = node;
    }

    public PTlist getTlist()
    {
        return this._tlist_;
    }

    public void setTlist(PTlist node)
    {
        if(this._tlist_ != null)
        {
            this._tlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tlist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._notNonterminal_)
            + toString(this._tlist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._notNonterminal_ == child)
        {
            this._notNonterminal_ = null;
            return;
        }

        if(this._tlist_ == child)
        {
            this._tlist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._notNonterminal_ == oldChild)
        {
            setNotNonterminal((PNotNonterminal) newChild);
            return;
        }

        if(this._tlist_ == oldChild)
        {
            setTlist((PTlist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
