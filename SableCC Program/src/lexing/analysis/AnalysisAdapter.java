/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.analysis;

import java.util.*;
import lexing.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAMainclass(AMainclass node)
    {
        defaultCase(node);
    }

    public void caseAClassdecl(AClassdecl node)
    {
        defaultCase(node);
    }

    public void caseAClassdeclspec(AClassdeclspec node)
    {
        defaultCase(node);
    }

    public void caseANoExtendsClassdecldeff(ANoExtendsClassdecldeff node)
    {
        defaultCase(node);
    }

    public void caseAExtendsClassdecldeff(AExtendsClassdecldeff node)
    {
        defaultCase(node);
    }

    public void caseAVardecl(AVardecl node)
    {
        defaultCase(node);
    }

    public void caseAVardecltype(AVardecltype node)
    {
        defaultCase(node);
    }

    public void caseAAssignVardecltypeassign(AAssignVardecltypeassign node)
    {
        defaultCase(node);
    }

    public void caseAEpsilonVardecltypeassign(AEpsilonVardecltypeassign node)
    {
        defaultCase(node);
    }

    public void caseAMultidecl(AMultidecl node)
    {
        defaultCase(node);
    }

    public void caseAMethoddecl(AMethoddecl node)
    {
        defaultCase(node);
    }

    public void caseAFormalrestFormallist(AFormalrestFormallist node)
    {
        defaultCase(node);
    }

    public void caseAEpsilonFormallist(AEpsilonFormallist node)
    {
        defaultCase(node);
    }

    public void caseAFormalrest(AFormalrest node)
    {
        defaultCase(node);
    }

    public void caseAArrayType(AArrayType node)
    {
        defaultCase(node);
    }

    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierType(AIdentifierType node)
    {
        defaultCase(node);
    }

    public void caseAArrayInttype(AArrayInttype node)
    {
        defaultCase(node);
    }

    public void caseAEpsilonInttype(AEpsilonInttype node)
    {
        defaultCase(node);
    }

    public void caseADefaultStatement(ADefaultStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseADoStatement(ADoStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    public void caseASwitchStatement(ASwitchStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintlnStatement(APrintlnStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseAFormalvarexpStatement(AFormalvarexpStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignAssignNonterminal(AAssignAssignNonterminal node)
    {
        defaultCase(node);
    }

    public void caseAArrayAssignNonterminal(AArrayAssignNonterminal node)
    {
        defaultCase(node);
    }

    public void caseAInitializeInitializationstm(AInitializeInitializationstm node)
    {
        defaultCase(node);
    }

    public void caseAAssignInitializationstm(AAssignInitializationstm node)
    {
        defaultCase(node);
    }

    public void caseAArrayInitializationstm(AArrayInitializationstm node)
    {
        defaultCase(node);
    }

    public void caseAAssignIncrementstm(AAssignIncrementstm node)
    {
        defaultCase(node);
    }

    public void caseAArrayIncrementstm(AArrayIncrementstm node)
    {
        defaultCase(node);
    }

    public void caseAElseifNonterminal(AElseifNonterminal node)
    {
        defaultCase(node);
    }

    public void caseAFormalvarexp(AFormalvarexp node)
    {
        defaultCase(node);
    }

    public void caseACaseCaselist(ACaseCaselist node)
    {
        defaultCase(node);
    }

    public void caseADefaultCaselist(ADefaultCaselist node)
    {
        defaultCase(node);
    }

    public void caseAExp(AExp node)
    {
        defaultCase(node);
    }

    public void caseAAndElist(AAndElist node)
    {
        defaultCase(node);
    }

    public void caseAEpsilonElist(AEpsilonElist node)
    {
        defaultCase(node);
    }

    public void caseAAndNonterminal(AAndNonterminal node)
    {
        defaultCase(node);
    }

    public void caseALessAlist(ALessAlist node)
    {
        defaultCase(node);
    }

    public void caseAEpsilonAlist(AEpsilonAlist node)
    {
        defaultCase(node);
    }

    public void caseALess(ALess node)
    {
        defaultCase(node);
    }

    public void caseAPlusLlist(APlusLlist node)
    {
        defaultCase(node);
    }

    public void caseAMinusLlist(AMinusLlist node)
    {
        defaultCase(node);
    }

    public void caseAEpsilonLlist(AEpsilonLlist node)
    {
        defaultCase(node);
    }

    public void caseANotNonterminalTerm(ANotNonterminalTerm node)
    {
        defaultCase(node);
    }

    public void caseAMultTlist(AMultTlist node)
    {
        defaultCase(node);
    }

    public void caseAEpsilonTlist(AEpsilonTlist node)
    {
        defaultCase(node);
    }

    public void caseANotNotNonterminal(ANotNotNonterminal node)
    {
        defaultCase(node);
    }

    public void caseAFactorNotNonterminal(AFactorNotNonterminal node)
    {
        defaultCase(node);
    }

    public void caseADotDotarray(ADotDotarray node)
    {
        defaultCase(node);
    }

    public void caseAArrayDotarray(AArrayDotarray node)
    {
        defaultCase(node);
    }

    public void caseALengthMember(ALengthMember node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierMember(AIdentifierMember node)
    {
        defaultCase(node);
    }

    public void caseAExpExplist(AExpExplist node)
    {
        defaultCase(node);
    }

    public void caseAEpsilonExplist(AEpsilonExplist node)
    {
        defaultCase(node);
    }

    public void caseAExprest(AExprest node)
    {
        defaultCase(node);
    }

    public void caseANumFactor(ANumFactor node)
    {
        defaultCase(node);
    }

    public void caseATrueFactor(ATrueFactor node)
    {
        defaultCase(node);
    }

    public void caseAFalseFactor(AFalseFactor node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierFactor(AIdentifierFactor node)
    {
        defaultCase(node);
    }

    public void caseAThisFactor(AThisFactor node)
    {
        defaultCase(node);
    }

    public void caseANewFactor(ANewFactor node)
    {
        defaultCase(node);
    }

    public void caseAExpFactor(AExpFactor node)
    {
        defaultCase(node);
    }

    public void caseAArrayNewNonterminal(AArrayNewNonterminal node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierNewNonterminal(AIdentifierNewNonterminal node)
    {
        defaultCase(node);
    }

    public void caseTDoubleSlashComment(TDoubleSlashComment node)
    {
        defaultCase(node);
    }

    public void caseTSpace(TSpace node)
    {
        defaultCase(node);
    }

    public void caseTClas(TClas node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    public void caseTMain(TMain node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTExtends(TExtends node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTPrintln(TPrintln node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    public void caseTElseif(TElseif node)
    {
        defaultCase(node);
    }

    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    public void caseTLength(TLength node)
    {
        defaultCase(node);
    }

    public void caseTEndIf(TEndIf node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTLessThan(TLessThan node)
    {
        defaultCase(node);
    }

    public void caseTCompare(TCompare node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTLeftParen(TLeftParen node)
    {
        defaultCase(node);
    }

    public void caseTRightParen(TRightParen node)
    {
        defaultCase(node);
    }

    public void caseTLeftBracket(TLeftBracket node)
    {
        defaultCase(node);
    }

    public void caseTRightBracket(TRightBracket node)
    {
        defaultCase(node);
    }

    public void caseTLeftBrace(TLeftBrace node)
    {
        defaultCase(node);
    }

    public void caseTRightBrace(TRightBrace node)
    {
        defaultCase(node);
    }

    public void caseTLeftQuote(TLeftQuote node)
    {
        defaultCase(node);
    }

    public void caseTRightQuote(TRightQuote node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTIntNum(TIntNum node)
    {
        defaultCase(node);
    }

    public void caseTMisc(TMisc node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
