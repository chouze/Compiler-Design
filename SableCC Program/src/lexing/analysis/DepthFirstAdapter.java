/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.analysis;

import java.util.*;
import lexing.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getMainclass() != null)
        {
            node.getMainclass().apply(this);
        }
        {
            List<PClassdecl> copy = new ArrayList<PClassdecl>(node.getClassdecl());
            for(PClassdecl e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAMainclass(AMainclass node)
    {
        defaultIn(node);
    }

    public void outAMainclass(AMainclass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainclass(AMainclass node)
    {
        inAMainclass(node);
        if(node.getClas() != null)
        {
            node.getClas().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getFirstLeftBrace() != null)
        {
            node.getFirstLeftBrace().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getSecondLeftBrace() != null)
        {
            node.getSecondLeftBrace().apply(this);
        }
        {
            List<PVardecl> copy = new ArrayList<PVardecl>(node.getVardecl());
            for(PVardecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getFirstRightBrace() != null)
        {
            node.getFirstRightBrace().apply(this);
        }
        if(node.getSecondRightBrace() != null)
        {
            node.getSecondRightBrace().apply(this);
        }
        outAMainclass(node);
    }

    public void inAClassdecl(AClassdecl node)
    {
        defaultIn(node);
    }

    public void outAClassdecl(AClassdecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassdecl(AClassdecl node)
    {
        inAClassdecl(node);
        if(node.getClassdeclspec() != null)
        {
            node.getClassdeclspec().apply(this);
        }
        if(node.getClassdecldeff() != null)
        {
            node.getClassdecldeff().apply(this);
        }
        outAClassdecl(node);
    }

    public void inAClassdeclspec(AClassdeclspec node)
    {
        defaultIn(node);
    }

    public void outAClassdeclspec(AClassdeclspec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassdeclspec(AClassdeclspec node)
    {
        inAClassdeclspec(node);
        if(node.getClas() != null)
        {
            node.getClas().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassdeclspec(node);
    }

    public void inANoExtendsClassdecldeff(ANoExtendsClassdecldeff node)
    {
        defaultIn(node);
    }

    public void outANoExtendsClassdecldeff(ANoExtendsClassdecldeff node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoExtendsClassdecldeff(ANoExtendsClassdecldeff node)
    {
        inANoExtendsClassdecldeff(node);
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        {
            List<PVardecl> copy = new ArrayList<PVardecl>(node.getVardecl());
            for(PVardecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMethoddecl> copy = new ArrayList<PMethoddecl>(node.getMethoddecl());
            for(PMethoddecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outANoExtendsClassdecldeff(node);
    }

    public void inAExtendsClassdecldeff(AExtendsClassdecldeff node)
    {
        defaultIn(node);
    }

    public void outAExtendsClassdecldeff(AExtendsClassdecldeff node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsClassdecldeff(AExtendsClassdecldeff node)
    {
        inAExtendsClassdecldeff(node);
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        {
            List<PVardecl> copy = new ArrayList<PVardecl>(node.getVardecl());
            for(PVardecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMethoddecl> copy = new ArrayList<PMethoddecl>(node.getMethoddecl());
            for(PMethoddecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outAExtendsClassdecldeff(node);
    }

    public void inAVardecl(AVardecl node)
    {
        defaultIn(node);
    }

    public void outAVardecl(AVardecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVardecl(AVardecl node)
    {
        inAVardecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getVardecltype() != null)
        {
            node.getVardecltype().apply(this);
        }
        {
            List<PMultidecl> copy = new ArrayList<PMultidecl>(node.getMultidecl());
            for(PMultidecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAVardecl(node);
    }

    public void inAVardecltype(AVardecltype node)
    {
        defaultIn(node);
    }

    public void outAVardecltype(AVardecltype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVardecltype(AVardecltype node)
    {
        inAVardecltype(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getVardecltypeassign() != null)
        {
            node.getVardecltypeassign().apply(this);
        }
        outAVardecltype(node);
    }

    public void inAAssignVardecltypeassign(AAssignVardecltypeassign node)
    {
        defaultIn(node);
    }

    public void outAAssignVardecltypeassign(AAssignVardecltypeassign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignVardecltypeassign(AAssignVardecltypeassign node)
    {
        inAAssignVardecltypeassign(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAssignVardecltypeassign(node);
    }

    public void inAEpsilonVardecltypeassign(AEpsilonVardecltypeassign node)
    {
        defaultIn(node);
    }

    public void outAEpsilonVardecltypeassign(AEpsilonVardecltypeassign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonVardecltypeassign(AEpsilonVardecltypeassign node)
    {
        inAEpsilonVardecltypeassign(node);
        outAEpsilonVardecltypeassign(node);
    }

    public void inAMultidecl(AMultidecl node)
    {
        defaultIn(node);
    }

    public void outAMultidecl(AMultidecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultidecl(AMultidecl node)
    {
        inAMultidecl(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getVardecltypeassign() != null)
        {
            node.getVardecltypeassign().apply(this);
        }
        outAMultidecl(node);
    }

    public void inAMethoddecl(AMethoddecl node)
    {
        defaultIn(node);
    }

    public void outAMethoddecl(AMethoddecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethoddecl(AMethoddecl node)
    {
        inAMethoddecl(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getFormallist() != null)
        {
            node.getFormallist().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        {
            List<PVardecl> copy = new ArrayList<PVardecl>(node.getVardecl());
            for(PVardecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outAMethoddecl(node);
    }

    public void inAFormalrestFormallist(AFormalrestFormallist node)
    {
        defaultIn(node);
    }

    public void outAFormalrestFormallist(AFormalrestFormallist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalrestFormallist(AFormalrestFormallist node)
    {
        inAFormalrestFormallist(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PFormalrest> copy = new ArrayList<PFormalrest>(node.getFormalrest());
            for(PFormalrest e : copy)
            {
                e.apply(this);
            }
        }
        outAFormalrestFormallist(node);
    }

    public void inAEpsilonFormallist(AEpsilonFormallist node)
    {
        defaultIn(node);
    }

    public void outAEpsilonFormallist(AEpsilonFormallist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonFormallist(AEpsilonFormallist node)
    {
        inAEpsilonFormallist(node);
        outAEpsilonFormallist(node);
    }

    public void inAFormalrest(AFormalrest node)
    {
        defaultIn(node);
    }

    public void outAFormalrest(AFormalrest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalrest(AFormalrest node)
    {
        inAFormalrest(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFormalrest(node);
    }

    public void inAArrayType(AArrayType node)
    {
        defaultIn(node);
    }

    public void outAArrayType(AArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        inAArrayType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getInttype() != null)
        {
            node.getInttype().apply(this);
        }
        outAArrayType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIdentifierType(AIdentifierType node)
    {
        defaultIn(node);
    }

    public void outAIdentifierType(AIdentifierType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierType(AIdentifierType node)
    {
        inAIdentifierType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierType(node);
    }

    public void inAArrayInttype(AArrayInttype node)
    {
        defaultIn(node);
    }

    public void outAArrayInttype(AArrayInttype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInttype(AArrayInttype node)
    {
        inAArrayInttype(node);
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outAArrayInttype(node);
    }

    public void inAEpsilonInttype(AEpsilonInttype node)
    {
        defaultIn(node);
    }

    public void outAEpsilonInttype(AEpsilonInttype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonInttype(AEpsilonInttype node)
    {
        inAEpsilonInttype(node);
        outAEpsilonInttype(node);
    }

    public void inADefaultStatement(ADefaultStatement node)
    {
        defaultIn(node);
    }

    public void outADefaultStatement(ADefaultStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultStatement(ADefaultStatement node)
    {
        inADefaultStatement(node);
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outADefaultStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        {
            List<PElseifNonterminal> copy = new ArrayList<PElseifNonterminal>(node.getElseifNonterminal());
            for(PElseifNonterminal e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEndIf() != null)
        {
            node.getEndIf().apply(this);
        }
        outAIfStatement(node);
    }

    public void inADoStatement(ADoStatement node)
    {
        defaultIn(node);
    }

    public void outADoStatement(ADoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoStatement(ADoStatement node)
    {
        inADoStatement(node);
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outADoStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getInitializationstm() != null)
        {
            node.getInitializationstm().apply(this);
        }
        if(node.getFirstSemi() != null)
        {
            node.getFirstSemi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSecondSemi() != null)
        {
            node.getSecondSemi().apply(this);
        }
        if(node.getIncrementstm() != null)
        {
            node.getIncrementstm().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAForStatement(node);
    }

    public void inASwitchStatement(ASwitchStatement node)
    {
        defaultIn(node);
    }

    public void outASwitchStatement(ASwitchStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchStatement(ASwitchStatement node)
    {
        inASwitchStatement(node);
        if(node.getSwitch() != null)
        {
            node.getSwitch().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getCaselist() != null)
        {
            node.getCaselist().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outASwitchStatement(node);
    }

    public void inAPrintlnStatement(APrintlnStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintlnStatement(APrintlnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnStatement(APrintlnStatement node)
    {
        inAPrintlnStatement(node);
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAPrintlnStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssignNonterminal() != null)
        {
            node.getAssignNonterminal().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAFormalvarexpStatement(AFormalvarexpStatement node)
    {
        defaultIn(node);
    }

    public void outAFormalvarexpStatement(AFormalvarexpStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalvarexpStatement(AFormalvarexpStatement node)
    {
        inAFormalvarexpStatement(node);
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssignNonterminal() != null)
        {
            node.getAssignNonterminal().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        {
            List<PFormalvarexp> copy = new ArrayList<PFormalvarexp>(node.getFormalvarexp());
            for(PFormalvarexp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAFormalvarexpStatement(node);
    }

    public void inAAssignAssignNonterminal(AAssignAssignNonterminal node)
    {
        defaultIn(node);
    }

    public void outAAssignAssignNonterminal(AAssignAssignNonterminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAssignNonterminal(AAssignAssignNonterminal node)
    {
        inAAssignAssignNonterminal(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAssignAssignNonterminal(node);
    }

    public void inAArrayAssignNonterminal(AArrayAssignNonterminal node)
    {
        defaultIn(node);
    }

    public void outAArrayAssignNonterminal(AArrayAssignNonterminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAssignNonterminal(AArrayAssignNonterminal node)
    {
        inAArrayAssignNonterminal(node);
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAArrayAssignNonterminal(node);
    }

    public void inAInitializeInitializationstm(AInitializeInitializationstm node)
    {
        defaultIn(node);
    }

    public void outAInitializeInitializationstm(AInitializeInitializationstm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializeInitializationstm(AInitializeInitializationstm node)
    {
        inAInitializeInitializationstm(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAInitializeInitializationstm(node);
    }

    public void inAAssignInitializationstm(AAssignInitializationstm node)
    {
        defaultIn(node);
    }

    public void outAAssignInitializationstm(AAssignInitializationstm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignInitializationstm(AAssignInitializationstm node)
    {
        inAAssignInitializationstm(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAssignInitializationstm(node);
    }

    public void inAArrayInitializationstm(AArrayInitializationstm node)
    {
        defaultIn(node);
    }

    public void outAArrayInitializationstm(AArrayInitializationstm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInitializationstm(AArrayInitializationstm node)
    {
        inAArrayInitializationstm(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAArrayInitializationstm(node);
    }

    public void inAAssignIncrementstm(AAssignIncrementstm node)
    {
        defaultIn(node);
    }

    public void outAAssignIncrementstm(AAssignIncrementstm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignIncrementstm(AAssignIncrementstm node)
    {
        inAAssignIncrementstm(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAssignIncrementstm(node);
    }

    public void inAArrayIncrementstm(AArrayIncrementstm node)
    {
        defaultIn(node);
    }

    public void outAArrayIncrementstm(AArrayIncrementstm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayIncrementstm(AArrayIncrementstm node)
    {
        inAArrayIncrementstm(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAArrayIncrementstm(node);
    }

    public void inAElseifNonterminal(AElseifNonterminal node)
    {
        defaultIn(node);
    }

    public void outAElseifNonterminal(AElseifNonterminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseifNonterminal(AElseifNonterminal node)
    {
        inAElseifNonterminal(node);
        if(node.getElseif() != null)
        {
            node.getElseif().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAElseifNonterminal(node);
    }

    public void inAFormalvarexp(AFormalvarexp node)
    {
        defaultIn(node);
    }

    public void outAFormalvarexp(AFormalvarexp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalvarexp(AFormalvarexp node)
    {
        inAFormalvarexp(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssignNonterminal() != null)
        {
            node.getAssignNonterminal().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        outAFormalvarexp(node);
    }

    public void inACaseCaselist(ACaseCaselist node)
    {
        defaultIn(node);
    }

    public void outACaseCaselist(ACaseCaselist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseCaselist(ACaseCaselist node)
    {
        inACaseCaselist(node);
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getCaselist() != null)
        {
            node.getCaselist().apply(this);
        }
        outACaseCaselist(node);
    }

    public void inADefaultCaselist(ADefaultCaselist node)
    {
        defaultIn(node);
    }

    public void outADefaultCaselist(ADefaultCaselist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultCaselist(ADefaultCaselist node)
    {
        inADefaultCaselist(node);
        if(node.getDefault() != null)
        {
            node.getDefault().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outADefaultCaselist(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getAndNonterminal() != null)
        {
            node.getAndNonterminal().apply(this);
        }
        if(node.getElist() != null)
        {
            node.getElist().apply(this);
        }
        outAExp(node);
    }

    public void inAAndElist(AAndElist node)
    {
        defaultIn(node);
    }

    public void outAAndElist(AAndElist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndElist(AAndElist node)
    {
        inAAndElist(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getAndNonterminal() != null)
        {
            node.getAndNonterminal().apply(this);
        }
        if(node.getElist() != null)
        {
            node.getElist().apply(this);
        }
        outAAndElist(node);
    }

    public void inAEpsilonElist(AEpsilonElist node)
    {
        defaultIn(node);
    }

    public void outAEpsilonElist(AEpsilonElist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonElist(AEpsilonElist node)
    {
        inAEpsilonElist(node);
        outAEpsilonElist(node);
    }

    public void inAAndNonterminal(AAndNonterminal node)
    {
        defaultIn(node);
    }

    public void outAAndNonterminal(AAndNonterminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndNonterminal(AAndNonterminal node)
    {
        inAAndNonterminal(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getAlist() != null)
        {
            node.getAlist().apply(this);
        }
        outAAndNonterminal(node);
    }

    public void inALessAlist(ALessAlist node)
    {
        defaultIn(node);
    }

    public void outALessAlist(ALessAlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessAlist(ALessAlist node)
    {
        inALessAlist(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getAlist() != null)
        {
            node.getAlist().apply(this);
        }
        outALessAlist(node);
    }

    public void inAEpsilonAlist(AEpsilonAlist node)
    {
        defaultIn(node);
    }

    public void outAEpsilonAlist(AEpsilonAlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonAlist(AEpsilonAlist node)
    {
        inAEpsilonAlist(node);
        outAEpsilonAlist(node);
    }

    public void inALess(ALess node)
    {
        defaultIn(node);
    }

    public void outALess(ALess node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALess(ALess node)
    {
        inALess(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getLlist() != null)
        {
            node.getLlist().apply(this);
        }
        outALess(node);
    }

    public void inAPlusLlist(APlusLlist node)
    {
        defaultIn(node);
    }

    public void outAPlusLlist(APlusLlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusLlist(APlusLlist node)
    {
        inAPlusLlist(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getLlist() != null)
        {
            node.getLlist().apply(this);
        }
        outAPlusLlist(node);
    }

    public void inAMinusLlist(AMinusLlist node)
    {
        defaultIn(node);
    }

    public void outAMinusLlist(AMinusLlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusLlist(AMinusLlist node)
    {
        inAMinusLlist(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getLlist() != null)
        {
            node.getLlist().apply(this);
        }
        outAMinusLlist(node);
    }

    public void inAEpsilonLlist(AEpsilonLlist node)
    {
        defaultIn(node);
    }

    public void outAEpsilonLlist(AEpsilonLlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonLlist(AEpsilonLlist node)
    {
        inAEpsilonLlist(node);
        outAEpsilonLlist(node);
    }

    public void inANotNonterminalTerm(ANotNonterminalTerm node)
    {
        defaultIn(node);
    }

    public void outANotNonterminalTerm(ANotNonterminalTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotNonterminalTerm(ANotNonterminalTerm node)
    {
        inANotNonterminalTerm(node);
        if(node.getNotNonterminal() != null)
        {
            node.getNotNonterminal().apply(this);
        }
        if(node.getTlist() != null)
        {
            node.getTlist().apply(this);
        }
        outANotNonterminalTerm(node);
    }

    public void inAMultTlist(AMultTlist node)
    {
        defaultIn(node);
    }

    public void outAMultTlist(AMultTlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTlist(AMultTlist node)
    {
        inAMultTlist(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getNotNonterminal() != null)
        {
            node.getNotNonterminal().apply(this);
        }
        if(node.getTlist() != null)
        {
            node.getTlist().apply(this);
        }
        outAMultTlist(node);
    }

    public void inAEpsilonTlist(AEpsilonTlist node)
    {
        defaultIn(node);
    }

    public void outAEpsilonTlist(AEpsilonTlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonTlist(AEpsilonTlist node)
    {
        inAEpsilonTlist(node);
        outAEpsilonTlist(node);
    }

    public void inANotNotNonterminal(ANotNotNonterminal node)
    {
        defaultIn(node);
    }

    public void outANotNotNonterminal(ANotNotNonterminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotNotNonterminal(ANotNotNonterminal node)
    {
        inANotNotNonterminal(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getNotNonterminal() != null)
        {
            node.getNotNonterminal().apply(this);
        }
        outANotNotNonterminal(node);
    }

    public void inAFactorNotNonterminal(AFactorNotNonterminal node)
    {
        defaultIn(node);
    }

    public void outAFactorNotNonterminal(AFactorNotNonterminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorNotNonterminal(AFactorNotNonterminal node)
    {
        inAFactorNotNonterminal(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        {
            List<PDotarray> copy = new ArrayList<PDotarray>(node.getDotarray());
            for(PDotarray e : copy)
            {
                e.apply(this);
            }
        }
        outAFactorNotNonterminal(node);
    }

    public void inADotDotarray(ADotDotarray node)
    {
        defaultIn(node);
    }

    public void outADotDotarray(ADotDotarray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADotDotarray(ADotDotarray node)
    {
        inADotDotarray(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        outADotDotarray(node);
    }

    public void inAArrayDotarray(AArrayDotarray node)
    {
        defaultIn(node);
    }

    public void outAArrayDotarray(AArrayDotarray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDotarray(AArrayDotarray node)
    {
        inAArrayDotarray(node);
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outAArrayDotarray(node);
    }

    public void inALengthMember(ALengthMember node)
    {
        defaultIn(node);
    }

    public void outALengthMember(ALengthMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALengthMember(ALengthMember node)
    {
        inALengthMember(node);
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        outALengthMember(node);
    }

    public void inAIdentifierMember(AIdentifierMember node)
    {
        defaultIn(node);
    }

    public void outAIdentifierMember(AIdentifierMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierMember(AIdentifierMember node)
    {
        inAIdentifierMember(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExplist() != null)
        {
            node.getExplist().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        outAIdentifierMember(node);
    }

    public void inAExpExplist(AExpExplist node)
    {
        defaultIn(node);
    }

    public void outAExpExplist(AExpExplist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExplist(AExpExplist node)
    {
        inAExpExplist(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PExprest> copy = new ArrayList<PExprest>(node.getExprest());
            for(PExprest e : copy)
            {
                e.apply(this);
            }
        }
        outAExpExplist(node);
    }

    public void inAEpsilonExplist(AEpsilonExplist node)
    {
        defaultIn(node);
    }

    public void outAEpsilonExplist(AEpsilonExplist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonExplist(AEpsilonExplist node)
    {
        inAEpsilonExplist(node);
        outAEpsilonExplist(node);
    }

    public void inAExprest(AExprest node)
    {
        defaultIn(node);
    }

    public void outAExprest(AExprest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprest(AExprest node)
    {
        inAExprest(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExprest(node);
    }

    public void inANumFactor(ANumFactor node)
    {
        defaultIn(node);
    }

    public void outANumFactor(ANumFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFactor(ANumFactor node)
    {
        inANumFactor(node);
        if(node.getIntNum() != null)
        {
            node.getIntNum().apply(this);
        }
        outANumFactor(node);
    }

    public void inATrueFactor(ATrueFactor node)
    {
        defaultIn(node);
    }

    public void outATrueFactor(ATrueFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueFactor(ATrueFactor node)
    {
        inATrueFactor(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueFactor(node);
    }

    public void inAFalseFactor(AFalseFactor node)
    {
        defaultIn(node);
    }

    public void outAFalseFactor(AFalseFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseFactor(AFalseFactor node)
    {
        inAFalseFactor(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseFactor(node);
    }

    public void inAIdentifierFactor(AIdentifierFactor node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFactor(AIdentifierFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierFactor(AIdentifierFactor node)
    {
        inAIdentifierFactor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierFactor(node);
    }

    public void inAThisFactor(AThisFactor node)
    {
        defaultIn(node);
    }

    public void outAThisFactor(AThisFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisFactor(AThisFactor node)
    {
        inAThisFactor(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAThisFactor(node);
    }

    public void inANewFactor(ANewFactor node)
    {
        defaultIn(node);
    }

    public void outANewFactor(ANewFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewFactor(ANewFactor node)
    {
        inANewFactor(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getNewNonterminal() != null)
        {
            node.getNewNonterminal().apply(this);
        }
        outANewFactor(node);
    }

    public void inAExpFactor(AExpFactor node)
    {
        defaultIn(node);
    }

    public void outAExpFactor(AExpFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpFactor(AExpFactor node)
    {
        inAExpFactor(node);
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        outAExpFactor(node);
    }

    public void inAArrayNewNonterminal(AArrayNewNonterminal node)
    {
        defaultIn(node);
    }

    public void outAArrayNewNonterminal(AArrayNewNonterminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayNewNonterminal(AArrayNewNonterminal node)
    {
        inAArrayNewNonterminal(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outAArrayNewNonterminal(node);
    }

    public void inAIdentifierNewNonterminal(AIdentifierNewNonterminal node)
    {
        defaultIn(node);
    }

    public void outAIdentifierNewNonterminal(AIdentifierNewNonterminal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierNewNonterminal(AIdentifierNewNonterminal node)
    {
        inAIdentifierNewNonterminal(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        outAIdentifierNewNonterminal(node);
    }
}
