/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import java.util.*;
import lexing.analysis.*;

@SuppressWarnings("nls")
public final class AMainclass extends PMainclass
{
    private TClas _clas_;
    private TIdentifier _className_;
    private TLeftBrace _firstLeftBrace_;
    private TPublic _public_;
    private TStatic _static_;
    private TVoid _void_;
    private TMain _main_;
    private TLeftParen _leftParen_;
    private TString _string_;
    private TLeftBracket _leftBracket_;
    private TRightBracket _rightBracket_;
    private TIdentifier _args_;
    private TRightParen _rightParen_;
    private TLeftBrace _secondLeftBrace_;
    private final LinkedList<PVardecl> _vardecl_ = new LinkedList<PVardecl>();
    private PStatement _statement_;
    private TRightBrace _firstRightBrace_;
    private TRightBrace _secondRightBrace_;

    public AMainclass()
    {
        // Constructor
    }

    public AMainclass(
        @SuppressWarnings("hiding") TClas _clas_,
        @SuppressWarnings("hiding") TIdentifier _className_,
        @SuppressWarnings("hiding") TLeftBrace _firstLeftBrace_,
        @SuppressWarnings("hiding") TPublic _public_,
        @SuppressWarnings("hiding") TStatic _static_,
        @SuppressWarnings("hiding") TVoid _void_,
        @SuppressWarnings("hiding") TMain _main_,
        @SuppressWarnings("hiding") TLeftParen _leftParen_,
        @SuppressWarnings("hiding") TString _string_,
        @SuppressWarnings("hiding") TLeftBracket _leftBracket_,
        @SuppressWarnings("hiding") TRightBracket _rightBracket_,
        @SuppressWarnings("hiding") TIdentifier _args_,
        @SuppressWarnings("hiding") TRightParen _rightParen_,
        @SuppressWarnings("hiding") TLeftBrace _secondLeftBrace_,
        @SuppressWarnings("hiding") List<PVardecl> _vardecl_,
        @SuppressWarnings("hiding") PStatement _statement_,
        @SuppressWarnings("hiding") TRightBrace _firstRightBrace_,
        @SuppressWarnings("hiding") TRightBrace _secondRightBrace_)
    {
        // Constructor
        setClas(_clas_);

        setClassName(_className_);

        setFirstLeftBrace(_firstLeftBrace_);

        setPublic(_public_);

        setStatic(_static_);

        setVoid(_void_);

        setMain(_main_);

        setLeftParen(_leftParen_);

        setString(_string_);

        setLeftBracket(_leftBracket_);

        setRightBracket(_rightBracket_);

        setArgs(_args_);

        setRightParen(_rightParen_);

        setSecondLeftBrace(_secondLeftBrace_);

        setVardecl(_vardecl_);

        setStatement(_statement_);

        setFirstRightBrace(_firstRightBrace_);

        setSecondRightBrace(_secondRightBrace_);

    }

    @Override
    public Object clone()
    {
        return new AMainclass(
            cloneNode(this._clas_),
            cloneNode(this._className_),
            cloneNode(this._firstLeftBrace_),
            cloneNode(this._public_),
            cloneNode(this._static_),
            cloneNode(this._void_),
            cloneNode(this._main_),
            cloneNode(this._leftParen_),
            cloneNode(this._string_),
            cloneNode(this._leftBracket_),
            cloneNode(this._rightBracket_),
            cloneNode(this._args_),
            cloneNode(this._rightParen_),
            cloneNode(this._secondLeftBrace_),
            cloneList(this._vardecl_),
            cloneNode(this._statement_),
            cloneNode(this._firstRightBrace_),
            cloneNode(this._secondRightBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMainclass(this);
    }

    public TClas getClas()
    {
        return this._clas_;
    }

    public void setClas(TClas node)
    {
        if(this._clas_ != null)
        {
            this._clas_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._clas_ = node;
    }

    public TIdentifier getClassName()
    {
        return this._className_;
    }

    public void setClassName(TIdentifier node)
    {
        if(this._className_ != null)
        {
            this._className_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._className_ = node;
    }

    public TLeftBrace getFirstLeftBrace()
    {
        return this._firstLeftBrace_;
    }

    public void setFirstLeftBrace(TLeftBrace node)
    {
        if(this._firstLeftBrace_ != null)
        {
            this._firstLeftBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._firstLeftBrace_ = node;
    }

    public TPublic getPublic()
    {
        return this._public_;
    }

    public void setPublic(TPublic node)
    {
        if(this._public_ != null)
        {
            this._public_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._public_ = node;
    }

    public TStatic getStatic()
    {
        return this._static_;
    }

    public void setStatic(TStatic node)
    {
        if(this._static_ != null)
        {
            this._static_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._static_ = node;
    }

    public TVoid getVoid()
    {
        return this._void_;
    }

    public void setVoid(TVoid node)
    {
        if(this._void_ != null)
        {
            this._void_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._void_ = node;
    }

    public TMain getMain()
    {
        return this._main_;
    }

    public void setMain(TMain node)
    {
        if(this._main_ != null)
        {
            this._main_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._main_ = node;
    }

    public TLeftParen getLeftParen()
    {
        return this._leftParen_;
    }

    public void setLeftParen(TLeftParen node)
    {
        if(this._leftParen_ != null)
        {
            this._leftParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParen_ = node;
    }

    public TString getString()
    {
        return this._string_;
    }

    public void setString(TString node)
    {
        if(this._string_ != null)
        {
            this._string_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._string_ = node;
    }

    public TLeftBracket getLeftBracket()
    {
        return this._leftBracket_;
    }

    public void setLeftBracket(TLeftBracket node)
    {
        if(this._leftBracket_ != null)
        {
            this._leftBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftBracket_ = node;
    }

    public TRightBracket getRightBracket()
    {
        return this._rightBracket_;
    }

    public void setRightBracket(TRightBracket node)
    {
        if(this._rightBracket_ != null)
        {
            this._rightBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightBracket_ = node;
    }

    public TIdentifier getArgs()
    {
        return this._args_;
    }

    public void setArgs(TIdentifier node)
    {
        if(this._args_ != null)
        {
            this._args_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._args_ = node;
    }

    public TRightParen getRightParen()
    {
        return this._rightParen_;
    }

    public void setRightParen(TRightParen node)
    {
        if(this._rightParen_ != null)
        {
            this._rightParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParen_ = node;
    }

    public TLeftBrace getSecondLeftBrace()
    {
        return this._secondLeftBrace_;
    }

    public void setSecondLeftBrace(TLeftBrace node)
    {
        if(this._secondLeftBrace_ != null)
        {
            this._secondLeftBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secondLeftBrace_ = node;
    }

    public LinkedList<PVardecl> getVardecl()
    {
        return this._vardecl_;
    }

    public void setVardecl(List<PVardecl> list)
    {
        this._vardecl_.clear();
        this._vardecl_.addAll(list);
        for(PVardecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    public TRightBrace getFirstRightBrace()
    {
        return this._firstRightBrace_;
    }

    public void setFirstRightBrace(TRightBrace node)
    {
        if(this._firstRightBrace_ != null)
        {
            this._firstRightBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._firstRightBrace_ = node;
    }

    public TRightBrace getSecondRightBrace()
    {
        return this._secondRightBrace_;
    }

    public void setSecondRightBrace(TRightBrace node)
    {
        if(this._secondRightBrace_ != null)
        {
            this._secondRightBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secondRightBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._clas_)
            + toString(this._className_)
            + toString(this._firstLeftBrace_)
            + toString(this._public_)
            + toString(this._static_)
            + toString(this._void_)
            + toString(this._main_)
            + toString(this._leftParen_)
            + toString(this._string_)
            + toString(this._leftBracket_)
            + toString(this._rightBracket_)
            + toString(this._args_)
            + toString(this._rightParen_)
            + toString(this._secondLeftBrace_)
            + toString(this._vardecl_)
            + toString(this._statement_)
            + toString(this._firstRightBrace_)
            + toString(this._secondRightBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._clas_ == child)
        {
            this._clas_ = null;
            return;
        }

        if(this._className_ == child)
        {
            this._className_ = null;
            return;
        }

        if(this._firstLeftBrace_ == child)
        {
            this._firstLeftBrace_ = null;
            return;
        }

        if(this._public_ == child)
        {
            this._public_ = null;
            return;
        }

        if(this._static_ == child)
        {
            this._static_ = null;
            return;
        }

        if(this._void_ == child)
        {
            this._void_ = null;
            return;
        }

        if(this._main_ == child)
        {
            this._main_ = null;
            return;
        }

        if(this._leftParen_ == child)
        {
            this._leftParen_ = null;
            return;
        }

        if(this._string_ == child)
        {
            this._string_ = null;
            return;
        }

        if(this._leftBracket_ == child)
        {
            this._leftBracket_ = null;
            return;
        }

        if(this._rightBracket_ == child)
        {
            this._rightBracket_ = null;
            return;
        }

        if(this._args_ == child)
        {
            this._args_ = null;
            return;
        }

        if(this._rightParen_ == child)
        {
            this._rightParen_ = null;
            return;
        }

        if(this._secondLeftBrace_ == child)
        {
            this._secondLeftBrace_ = null;
            return;
        }

        if(this._vardecl_.remove(child))
        {
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        if(this._firstRightBrace_ == child)
        {
            this._firstRightBrace_ = null;
            return;
        }

        if(this._secondRightBrace_ == child)
        {
            this._secondRightBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._clas_ == oldChild)
        {
            setClas((TClas) newChild);
            return;
        }

        if(this._className_ == oldChild)
        {
            setClassName((TIdentifier) newChild);
            return;
        }

        if(this._firstLeftBrace_ == oldChild)
        {
            setFirstLeftBrace((TLeftBrace) newChild);
            return;
        }

        if(this._public_ == oldChild)
        {
            setPublic((TPublic) newChild);
            return;
        }

        if(this._static_ == oldChild)
        {
            setStatic((TStatic) newChild);
            return;
        }

        if(this._void_ == oldChild)
        {
            setVoid((TVoid) newChild);
            return;
        }

        if(this._main_ == oldChild)
        {
            setMain((TMain) newChild);
            return;
        }

        if(this._leftParen_ == oldChild)
        {
            setLeftParen((TLeftParen) newChild);
            return;
        }

        if(this._string_ == oldChild)
        {
            setString((TString) newChild);
            return;
        }

        if(this._leftBracket_ == oldChild)
        {
            setLeftBracket((TLeftBracket) newChild);
            return;
        }

        if(this._rightBracket_ == oldChild)
        {
            setRightBracket((TRightBracket) newChild);
            return;
        }

        if(this._args_ == oldChild)
        {
            setArgs((TIdentifier) newChild);
            return;
        }

        if(this._rightParen_ == oldChild)
        {
            setRightParen((TRightParen) newChild);
            return;
        }

        if(this._secondLeftBrace_ == oldChild)
        {
            setSecondLeftBrace((TLeftBrace) newChild);
            return;
        }

        for(ListIterator<PVardecl> i = this._vardecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVardecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        if(this._firstRightBrace_ == oldChild)
        {
            setFirstRightBrace((TRightBrace) newChild);
            return;
        }

        if(this._secondRightBrace_ == oldChild)
        {
            setSecondRightBrace((TRightBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
