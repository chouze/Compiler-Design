/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import lexing.analysis.*;

@SuppressWarnings("nls")
public final class AAndElist extends PElist
{
    private TAnd _and_;
    private PAndNonterminal _andNonterminal_;
    private PElist _elist_;

    public AAndElist()
    {
        // Constructor
    }

    public AAndElist(
        @SuppressWarnings("hiding") TAnd _and_,
        @SuppressWarnings("hiding") PAndNonterminal _andNonterminal_,
        @SuppressWarnings("hiding") PElist _elist_)
    {
        // Constructor
        setAnd(_and_);

        setAndNonterminal(_andNonterminal_);

        setElist(_elist_);

    }

    @Override
    public Object clone()
    {
        return new AAndElist(
            cloneNode(this._and_),
            cloneNode(this._andNonterminal_),
            cloneNode(this._elist_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndElist(this);
    }

    public TAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(TAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    public PAndNonterminal getAndNonterminal()
    {
        return this._andNonterminal_;
    }

    public void setAndNonterminal(PAndNonterminal node)
    {
        if(this._andNonterminal_ != null)
        {
            this._andNonterminal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andNonterminal_ = node;
    }

    public PElist getElist()
    {
        return this._elist_;
    }

    public void setElist(PElist node)
    {
        if(this._elist_ != null)
        {
            this._elist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._and_)
            + toString(this._andNonterminal_)
            + toString(this._elist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        if(this._andNonterminal_ == child)
        {
            this._andNonterminal_ = null;
            return;
        }

        if(this._elist_ == child)
        {
            this._elist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(this._andNonterminal_ == oldChild)
        {
            setAndNonterminal((PAndNonterminal) newChild);
            return;
        }

        if(this._elist_ == oldChild)
        {
            setElist((PElist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
