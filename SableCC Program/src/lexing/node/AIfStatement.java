/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import java.util.*;
import lexing.analysis.*;

@SuppressWarnings("nls")
public final class AIfStatement extends PStatement
{
    private TIf _if_;
    private TLeftParen _leftParen_;
    private PExp _exp_;
    private TRightParen _rightParen_;
    private TLeftBrace _leftBrace_;
    private PStatement _statement_;
    private TRightBrace _rightBrace_;
    private final LinkedList<PElseifNonterminal> _elseifNonterminal_ = new LinkedList<PElseifNonterminal>();
    private TEndIf _endIf_;

    public AIfStatement()
    {
        // Constructor
    }

    public AIfStatement(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLeftParen _leftParen_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TRightParen _rightParen_,
        @SuppressWarnings("hiding") TLeftBrace _leftBrace_,
        @SuppressWarnings("hiding") PStatement _statement_,
        @SuppressWarnings("hiding") TRightBrace _rightBrace_,
        @SuppressWarnings("hiding") List<PElseifNonterminal> _elseifNonterminal_,
        @SuppressWarnings("hiding") TEndIf _endIf_)
    {
        // Constructor
        setIf(_if_);

        setLeftParen(_leftParen_);

        setExp(_exp_);

        setRightParen(_rightParen_);

        setLeftBrace(_leftBrace_);

        setStatement(_statement_);

        setRightBrace(_rightBrace_);

        setElseifNonterminal(_elseifNonterminal_);

        setEndIf(_endIf_);

    }

    @Override
    public Object clone()
    {
        return new AIfStatement(
            cloneNode(this._if_),
            cloneNode(this._leftParen_),
            cloneNode(this._exp_),
            cloneNode(this._rightParen_),
            cloneNode(this._leftBrace_),
            cloneNode(this._statement_),
            cloneNode(this._rightBrace_),
            cloneList(this._elseifNonterminal_),
            cloneNode(this._endIf_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStatement(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLeftParen getLeftParen()
    {
        return this._leftParen_;
    }

    public void setLeftParen(TLeftParen node)
    {
        if(this._leftParen_ != null)
        {
            this._leftParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParen_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TRightParen getRightParen()
    {
        return this._rightParen_;
    }

    public void setRightParen(TRightParen node)
    {
        if(this._rightParen_ != null)
        {
            this._rightParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParen_ = node;
    }

    public TLeftBrace getLeftBrace()
    {
        return this._leftBrace_;
    }

    public void setLeftBrace(TLeftBrace node)
    {
        if(this._leftBrace_ != null)
        {
            this._leftBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftBrace_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    public TRightBrace getRightBrace()
    {
        return this._rightBrace_;
    }

    public void setRightBrace(TRightBrace node)
    {
        if(this._rightBrace_ != null)
        {
            this._rightBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightBrace_ = node;
    }

    public LinkedList<PElseifNonterminal> getElseifNonterminal()
    {
        return this._elseifNonterminal_;
    }

    public void setElseifNonterminal(List<PElseifNonterminal> list)
    {
        this._elseifNonterminal_.clear();
        this._elseifNonterminal_.addAll(list);
        for(PElseifNonterminal e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEndIf getEndIf()
    {
        return this._endIf_;
    }

    public void setEndIf(TEndIf node)
    {
        if(this._endIf_ != null)
        {
            this._endIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endIf_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._leftParen_)
            + toString(this._exp_)
            + toString(this._rightParen_)
            + toString(this._leftBrace_)
            + toString(this._statement_)
            + toString(this._rightBrace_)
            + toString(this._elseifNonterminal_)
            + toString(this._endIf_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._leftParen_ == child)
        {
            this._leftParen_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._rightParen_ == child)
        {
            this._rightParen_ = null;
            return;
        }

        if(this._leftBrace_ == child)
        {
            this._leftBrace_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        if(this._rightBrace_ == child)
        {
            this._rightBrace_ = null;
            return;
        }

        if(this._elseifNonterminal_.remove(child))
        {
            return;
        }

        if(this._endIf_ == child)
        {
            this._endIf_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._leftParen_ == oldChild)
        {
            setLeftParen((TLeftParen) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._rightParen_ == oldChild)
        {
            setRightParen((TRightParen) newChild);
            return;
        }

        if(this._leftBrace_ == oldChild)
        {
            setLeftBrace((TLeftBrace) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        if(this._rightBrace_ == oldChild)
        {
            setRightBrace((TRightBrace) newChild);
            return;
        }

        for(ListIterator<PElseifNonterminal> i = this._elseifNonterminal_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PElseifNonterminal) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endIf_ == oldChild)
        {
            setEndIf((TEndIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
