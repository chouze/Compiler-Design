/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.node;

import lexing.analysis.*;

@SuppressWarnings("nls")
public final class AForStatement extends PStatement
{
    private TFor _for_;
    private TLeftParen _leftParen_;
    private PInitializationstm _initializationstm_;
    private TSemi _firstSemi_;
    private PExp _exp_;
    private TSemi _secondSemi_;
    private PIncrementstm _incrementstm_;
    private TRightParen _rightParen_;
    private PStatement _statement_;

    public AForStatement()
    {
        // Constructor
    }

    public AForStatement(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") TLeftParen _leftParen_,
        @SuppressWarnings("hiding") PInitializationstm _initializationstm_,
        @SuppressWarnings("hiding") TSemi _firstSemi_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TSemi _secondSemi_,
        @SuppressWarnings("hiding") PIncrementstm _incrementstm_,
        @SuppressWarnings("hiding") TRightParen _rightParen_,
        @SuppressWarnings("hiding") PStatement _statement_)
    {
        // Constructor
        setFor(_for_);

        setLeftParen(_leftParen_);

        setInitializationstm(_initializationstm_);

        setFirstSemi(_firstSemi_);

        setExp(_exp_);

        setSecondSemi(_secondSemi_);

        setIncrementstm(_incrementstm_);

        setRightParen(_rightParen_);

        setStatement(_statement_);

    }

    @Override
    public Object clone()
    {
        return new AForStatement(
            cloneNode(this._for_),
            cloneNode(this._leftParen_),
            cloneNode(this._initializationstm_),
            cloneNode(this._firstSemi_),
            cloneNode(this._exp_),
            cloneNode(this._secondSemi_),
            cloneNode(this._incrementstm_),
            cloneNode(this._rightParen_),
            cloneNode(this._statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public TLeftParen getLeftParen()
    {
        return this._leftParen_;
    }

    public void setLeftParen(TLeftParen node)
    {
        if(this._leftParen_ != null)
        {
            this._leftParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParen_ = node;
    }

    public PInitializationstm getInitializationstm()
    {
        return this._initializationstm_;
    }

    public void setInitializationstm(PInitializationstm node)
    {
        if(this._initializationstm_ != null)
        {
            this._initializationstm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._initializationstm_ = node;
    }

    public TSemi getFirstSemi()
    {
        return this._firstSemi_;
    }

    public void setFirstSemi(TSemi node)
    {
        if(this._firstSemi_ != null)
        {
            this._firstSemi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._firstSemi_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TSemi getSecondSemi()
    {
        return this._secondSemi_;
    }

    public void setSecondSemi(TSemi node)
    {
        if(this._secondSemi_ != null)
        {
            this._secondSemi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secondSemi_ = node;
    }

    public PIncrementstm getIncrementstm()
    {
        return this._incrementstm_;
    }

    public void setIncrementstm(PIncrementstm node)
    {
        if(this._incrementstm_ != null)
        {
            this._incrementstm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._incrementstm_ = node;
    }

    public TRightParen getRightParen()
    {
        return this._rightParen_;
    }

    public void setRightParen(TRightParen node)
    {
        if(this._rightParen_ != null)
        {
            this._rightParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParen_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._leftParen_)
            + toString(this._initializationstm_)
            + toString(this._firstSemi_)
            + toString(this._exp_)
            + toString(this._secondSemi_)
            + toString(this._incrementstm_)
            + toString(this._rightParen_)
            + toString(this._statement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._leftParen_ == child)
        {
            this._leftParen_ = null;
            return;
        }

        if(this._initializationstm_ == child)
        {
            this._initializationstm_ = null;
            return;
        }

        if(this._firstSemi_ == child)
        {
            this._firstSemi_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._secondSemi_ == child)
        {
            this._secondSemi_ = null;
            return;
        }

        if(this._incrementstm_ == child)
        {
            this._incrementstm_ = null;
            return;
        }

        if(this._rightParen_ == child)
        {
            this._rightParen_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._leftParen_ == oldChild)
        {
            setLeftParen((TLeftParen) newChild);
            return;
        }

        if(this._initializationstm_ == oldChild)
        {
            setInitializationstm((PInitializationstm) newChild);
            return;
        }

        if(this._firstSemi_ == oldChild)
        {
            setFirstSemi((TSemi) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._secondSemi_ == oldChild)
        {
            setSecondSemi((TSemi) newChild);
            return;
        }

        if(this._incrementstm_ == oldChild)
        {
            setIncrementstm((PIncrementstm) newChild);
            return;
        }

        if(this._rightParen_ == oldChild)
        {
            setRightParen((TRightParen) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
